Para crear repo en git:
en github creamos, de donde sacamos url
desde consola: git clone URLGithub (esto te clona tu repo en local)

desde consola gedit + fichero y abre editor
cuando haces cambios en el repo, en la linea del shell te indica cambios, con git status te dice el estado.

Una vez se han realizado cambios en el repo, tenemos que hacer commit para decir que esta listo para subir 
al repo remoto, o algo asi

Para hacer el paso en local a Staging se tiene que hacer git add + NombreFichero (o git add -u --que es updated ficheros)

Para hacer commit en local git commit -m "Message"

Y para sync Repo local y remoto git push

Para resumir WorkFlow:

git clone URLGithub	# Importa "clona" Repo desde Github
git add Fichero		# Añade Fichero a fase Staging	
git commit -m		# Commit local
git push		# Commit Remoto

Las fases son:
	Directorio trabajo ---------> Staging ---------> RepoLocal ---------> RepoRemoto


Podemos crear un git desde local con git init NombreDirectorio
Despues todo igual salvo subir el repo a GitHub, para ello, debemos crear Repo vacio en GitHub y luego:
'''
…or push an existing repository from the command line

git remote add origin https://github.com/toniet/MisIdeas.git
git branch -M main
git push -u origin main
'''

con less podemos ver fichero texto en modo solo lectura con busquedas, tipo man de linux, de hecho utiliza lo mismo
pero las búsquedas son desde la posicion desde donde estas, no desde el principio. Con g vamos al principio de fichero y con G 
vamos al final, podemos utilizar el -N como en cat para mostrar los numeros de lineas.
Con -S podemos ver todo en la misma linea. Nos quedamos con: less -N -S

Comandos interesantes de shell
ctrl + u --borrar todo
ctrl + k --borrar a partir
ctrl + l --clear
ctrl + d --cierra terminal
ctrl + shift t --nueva pestaña terminal
ctrl + shift n --nueva terminal
alias (printenv) -- type "alias" para saber que estamos ejecutando, podemos crear alias nuevos al igual que se crean las variables
	Se eliminan en cada sesion de terminal
Ejemplos: 
	type python --que estas diciendo realmente
	which python --que se ejecuta
	whereis python --donde lo encontramos
	(es por el tema de pip install..... donde se instala)
	--> sudo which python --que se ejecuta

con head vemos "n" primeras lineas y con tail vemos las "n" ultimas lineas
con wc Fichero, numero de lineas palabras y bytes de un fichero
con estas dos cosas trabajaremos con pipelines de shell:
	echo "HELP meeeee" | wc
	cat Text_example.txt | wc
	cat Text_example.txt | head -3 | wc
	head -3 Text_example.txt | wc
con > volcamos pantalla en un fichero
con >> añadimos pantalla en un fichero que ya existe
con < lee de un fichero  
	wc < Text_example.txt

EJERCICIO con PIPES:
Pasos:
	1.- ls -l -S | head -2 | tail -1 > largest_file.txt
	2.- head -5 Finn.txt | wc -w 
	3.- cat -n Text_example.txt | head -3

Utilizamos find para buscar:
	find . -maxdepth 5 -type f -name "text_file*"
	find -type f -perm 777
	sudo find -type f -iname "text_file*" -exec echo "FOUND IT" \;  para ejecutar en cada linea
	sudo find -type f -iname "text_file*" -exec ls -l {} \; -exec head -2 {} \;
	sudo find -type f -iname "text_file*" -ok ls -l {} \; --ideal para controlar borrados
	sudo find -type f -iname "text_file*" -exec bash -c "head -2 {} | wc" \; --para poder hacer pipe con el exec 

EJERCICIO FIND:
Pasos:
	1.- sudo find -type f -mmin -60
	2.- sudo find -type f -empty ! -perm 777 
	3.- sudo find -type f -empty ! -perm 777 -ok chmod 777 {} \;
	4.- find -type d -exec bash -c "echo directrio {}; ls -l -S {}| head -4" \;